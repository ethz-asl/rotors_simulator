<launch>
  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="log_file" default="firefly"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/basic.world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <include file="$(find rotors_gazebo)/launch/spawn_firefly.launch">
    <arg name="model" value="$(find rotors_description)/urdf/firefly_generic_pose_sensor.gazebo" />
    <arg name="enable_logging" value="$(arg enable_logging)" />
    <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
    <arg name="log_file" value="$(arg log_file)"/>
  </include>

  <group ns="firefly">
	<node name="msf" pkg="msf_updates" type="pose_sensor" clear_params="true" output="screen">
	  <remap from="msf_updates/pose_with_covariance_input" to="odometry_sensor1/pose_with_covariance" />
	  <remap from="msf_core/imu_state_input" to="imu" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/msf_simulator.yaml" />
	  <param name="capability_group" value="Core"></param>
	</node>

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_firefly.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/firefly.yaml" />
      <remap from="odometry" to="msf_core/odometry" />
    </node>
    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>
  </group>
</launch>
